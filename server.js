var http = require("http")
var url = require("url")
var path = require("path")
var fs = require("fs")
var port = process.argv[2] || 1997;
var ips = [""];
function exploitLog(file){
	if(file.includes("/ready.js")){
		console.log("[STATUS] Starting the exploit...");
	}if(file.includes("/pwn.js")){
		console.log("[STATUS] Exploiting...");
	}if(file.includes("/done.js")){
		console.log("[STATUS] Done!");
		ips.length = 0;
	}
}
server = http.createServer(function (request, response) {
	var uri = url.parse(request.url).pathname
	var filename = path.join(process.cwd(), uri)
	var contentTypes = {
		".html": "text/html",
		".css": "text/css",
		".js": "text/javascript"
	};
	var agent = request.headers["user-agent"];
	if(!ips.includes(request.connection.remoteAddress)){
		if(agent.includes("(iPhone; CPU iPhone OS")){
			if(agent.includes("(iPhone; CPU iPhone OS 12_0 like Mac OS X)")){
				console.log("iOS 12.0 Device connected!");
			}else if(agent.includes("(iPhone; CPU iPhone OS 12_1 like Mac OS X)")){
				console.log("iOS 12.1 Device connected!");
			}else{
				console.log("iOS X Device connected!");
			}
		}else if(agent.includes("(Macintosh; Intel Mac OS")){
			console.log("MacOS Device connected!");
		}else{
			console.log("Unknown/Unsupported Device connected!");
		}ips.push(request.connection.remoteAddress);
	}else{
		// Action when the page is refreshed
	}
	fs.exists(filename, function(exists) {
		if(!exists) {
			response.writeHead(404, {"Content-Type": "text/plain"});
			response.write("Not found, bro!");
			response.end();
			return;
		}if(fs.statSync(filename).isDirectory()){
			filename += "/index.html";
		}
		fs.readFile(filename, "binary", function(err, file) {
			if(err){
				response.writeHead(500, {"Content-Type": "text/plain"});
				response.write("an error occured! \nError: " + err);
				response.end();
				return;
			}
			var headers = {};
			var contentType = contentTypes[path.extname(filename)];
			if(contentType){
				headers["Content-Type"] = contentType;
			}
			response.writeHead(200, headers);
			response.write(file, "binary");
			response.end();
		});
		exploitLog(filename);
	});
});
server.on("connection", function(socket) {
	server.setTimeout(150000);
});
server.on("timeout", function(socket) {
	// when 15 seconds idle. 
});
server.listen(parseInt(port, 10));
console.log("server running at port " + port);
